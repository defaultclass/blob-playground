{"version":3,"sources":["components/ranges/ranges.module.css","components/form/form.module.css","components/blob/blob.module.css","serviceWorker.js","helper/initialState.js","components/ranges/ranges.js","components/form/form.js","components/blob/blob.js","index.js"],"names":["module","exports","input","inputBar","inputWrapper","label","rangeWrapper","wrapper","form","blob","movingGradient","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","randomNumber","Math","floor","random","initialState","topLeftRadius","topRightRadius","bottomRightRadius","bottomLeftRadius","copyStatus","Ranges","_ref","ranges","handleChange","range","map","react_default","a","createElement","key","id","className","styles","htmlFor","name","type","value","onChange","style","width","concat","Form","status","handleSubmit","readOnly","onClick","Blob","radius","copyToClipboard","values","forEach","item","push","radiusValue","join","blobStyle","borderRadius","Fragment","Object","objectSpread","form_form","App","updateBorderValue","event","_this$setState","rangeId","target","rangeValue","Number","_this","setState","defineProperty","preventDefault","document","getElementById","select","execCommand","_this$state","this","rangeInputs","ranges_ranges","Component","ReactDOM","render","src_App","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fd5e31ea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ranges_input__3TySq\",\"inputBar\":\"ranges_inputBar__3llJw\",\"inputWrapper\":\"ranges_inputWrapper__3hpyM\",\"label\":\"ranges_label__YgOl5\",\"rangeWrapper\":\"ranges_rangeWrapper__cvaVL\",\"wrapper\":\"ranges_wrapper__2D_ac\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"form_form__1mImT\",\"input\":\"form_input__37aHz\",\"label\":\"form_label__37Ija\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blob\":\"blob_blob__12pzG\",\"movingGradient\":\"blob_movingGradient__22OaC\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const randomNumber = () => Math.floor(Math.random() * 100);\n\nconst topLeftRandom = randomNumber();\nconst topRightRandom = randomNumber();\nconst bottomRightRandom = randomNumber();\nconst bottomLeftRandom = randomNumber();\n\nconst initialState = {\n  topLeftRadius: topLeftRandom,\n  topRightRadius: topRightRandom,\n  bottomRightRadius: bottomRightRandom,\n  bottomLeftRadius: bottomLeftRandom,\n  copyStatus: false\n};\n\nexport default initialState;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./ranges.module.css\";\n\nconst Ranges = ({ ranges, handleChange }) => {\n  const range = ranges.map(input => {\n    return (\n      <section key={input.id} className={styles.rangeWrapper}>\n        <label htmlFor={input.id} className={styles.label}>\n          {input.name}\n        </label>\n        <div className={styles.inputWrapper}>\n          <input\n            type=\"range\"\n            className={styles.input}\n            id={input.id}\n            value={input.value}\n            onChange={handleChange}\n          />\n          <div className={styles.inputBar} style={{ width: `${input.value}%` }} />\n        </div>\n      </section>\n    );\n  });\n  return <section className={styles.wrapper}>{range}</section>;\n};\n\nRanges.propTypes = {\n  ranges: PropTypes.array.isRequired,\n  handleChange: PropTypes.func.isRequired\n};\n\nexport default Ranges;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./form.module.css\";\n\nconst Form = ({ value, status, handleSubmit }) => {\n  const copyStatus = status ? \"Copied\" : \"Copy\";\n  return (\n    <form className={styles.form}>\n      <label htmlFor=\"copyCSS\" className={styles.label}>\n        {copyStatus} Border Radius CSS\n      </label>\n      <input\n        type=\"text\"\n        id=\"copyCSS\"\n        className={styles.input}\n        readOnly\n        value={`border-radius: ${value};`}\n        onClick={handleSubmit}\n      />\n    </form>\n  );\n};\n\nForm.propTypes = {\n  value: PropTypes.string.isRequired,\n  status: PropTypes.bool.isRequired,\n  handleSubmit: PropTypes.func.isRequired\n};\n\nexport default Form;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./blob.module.css\";\nimport Form from \"../form/form\";\n\nconst Blob = ({ radius, copyStatus, copyToClipboard }) => {\n  let values = [];\n  radius.forEach(item => values.push(`${item.value}%`));\n  const radiusValue = values.join(\" \");\n  const blobStyle = {\n    borderRadius: radiusValue\n  };\n  return (\n    <>\n      <div className={styles.blob} style={{ ...blobStyle }} />\n      <Form value={radiusValue} status={copyStatus} handleSubmit={copyToClipboard} />\n    </>\n  );\n};\n\nBlob.propTypes = {\n  radius: PropTypes.array.isRequired,\n  copyStatus: PropTypes.bool.isRequired,\n  copyToClipboard: PropTypes.func.isRequired\n};\n\nexport default Blob;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport initialState from \"./helper/initialState\";\nimport \"./index.css\";\nimport Ranges from \"./components/ranges/ranges\";\nimport Blob from \"./components/blob/blob\";\n\nclass App extends Component {\n  state = { ...initialState };\n\n  updateBorderValue = event => {\n    const rangeId = event.target.id;\n    const rangeValue = Number(event.target.value);\n    this.setState({\n      [rangeId]: rangeValue,\n      copyStatus: false\n    });\n  };\n\n  copyToClipboard = event => {\n    event.preventDefault();\n    const copyCSS = document.getElementById(\"copyCSS\");\n    copyCSS.select();\n    document.execCommand(\"copy\");\n    this.setState({\n      copyStatus: true\n    });\n  };\n\n  render() {\n    const {\n      topLeftRadius,\n      topRightRadius,\n      bottomLeftRadius,\n      bottomRightRadius,\n      copyStatus\n    } = this.state;\n    const { updateBorderValue, copyToClipboard } = this;\n    const rangeInputs = [\n      {\n        id: \"topLeftRadius\",\n        value: topLeftRadius,\n        name: \"Top Left Radius\"\n      },\n      {\n        id: \"topRightRadius\",\n        value: topRightRadius,\n        name: \"Top Right Radius\"\n      },\n      {\n        id: \"bottomRightRadius\",\n        value: bottomRightRadius,\n        name: \"Bottom Right Radius\"\n      },\n      {\n        id: \"bottomLeftRadius\",\n        value: bottomLeftRadius,\n        name: \"Bottom Left Radius\"\n      }\n    ];\n\n    return (\n      <>\n        <Blob radius={rangeInputs} copyStatus={copyStatus} copyToClipboard={copyToClipboard} />\n        <Ranges ranges={rangeInputs} handleChange={updateBorderValue} />\n      </>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}